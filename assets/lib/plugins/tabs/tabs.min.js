+ function ($) {
    'use strict';

    var Tabs = function (element) {
        this.element = $(element)
        this.container = $('#content-main');
        this.tabsContent = $('.page-tabs-content')
    }

    Tabs.VERSION = '1.0.1'

    Tabs.prototype.open = function (options) {

        var $this = this;
        var options = $.extend({
            tabs: options.tabs,
            newTabed: options.newTabed || false,
            url: decodeURI(options.url),
            title: options.title,
            newWindowOpened: Number(options.newWindowOpened) || false
        }, options || {});

        var url = options.url || '';
        if (!url) return;

        //验证是否打开新窗口
        var keyTags = Number(options.newWindowOpened)
        if (keyTags) {
            window.open(url);
            return
        }

        //验证是否支持多个Tab,同一个url打开多个tab页
        if (options.newTabed) {
            options.tabs = Math.uuid();
        }
        //url 加上tabID 用于iframe框架内关闭标签
        if (url.indexOf('?') == -1) {
            url = url + '?tabs=' + options.tabs + '&r=' + Math.random();
        } else {
            url = url + '&tabs=' + options.tabs + '&r=' + Math.random();
        }
        //验证Tab是否已经开启，如果开启则激活它
        var $tab = $('#' + options.tabs + '-tab');
        if ($tab.length) {
            $this.show($tab);
            return false
        }

        //生成Tab头
        var $element = $('<a id="{id}-tab" data-href="#{id}" title="{title}"  role="tab" data-toggle="tabs"><i class="fa fa-refresh" data-tabs="refresh"></i> {title} <i class="fa fa-times-circle" data-tabs="close"></i></a>'
            .replace(/\{id\}/g, options.tabs)
            .replace(/\{title\}/g, options.title)
        );
        $this.tabsContent.append($element);

        //生成iframe框架
        var iframe = document.createElement("iframe");
        var $ifame = $(iframe)
        iframe.src = url;
        iframe.id = options.tabs;
        iframe.frameBorder = 0;
        iframe.height = '100%';
        iframe.width = '100%';
        $ifame.css({
            visibility: 'hidden'
        })

        //iframe框架 加载遮罩效果
        var mask = $('<div class="backdrop"><div>').appendTo(this.container);
        var maskMessage = $('<div class="backdrop-loading">页面组件加载中,请稍候...</div>').appendTo(this.container);

        if (iframe.attachEvent) {
            iframe.attachEvent("onload", function () {
                $([mask[0], maskMessage[0]]).fadeOut('slow', function () {
                    $(this).remove();
                    $ifame.css('visibility', 'visible')
                });
            });
        } else {
            iframe.onload = function () {
                $([mask[0], maskMessage[0]]).fadeOut('slow', function () {
                    $(this).remove();
                    $ifame.css('visibility', 'visible')
                });
            };
        }

        this.container.append(iframe);
        $this.show($element);
    }

    Tabs.prototype.show = function (element) {

        var $element = element || this.element
        
        var selector = $element.data('target')

        if (!selector) {
            selector = $element.data('href')
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
        }
        if ($element.hasClass('active')) return

        var $target = $(selector)
        this.activate($element, $element.parent())
        this.activate($target, $target.parent())
        this.scroll($element);
    }

    Tabs.prototype.activate = function (element, container) {

        var $active = container.find('> .active')

        function next() {
            $active
                .removeClass('active')
            element
                .addClass('active')
        }
        $active.length && next()
    }

    Tabs.prototype.getWidth = function (element) {
        var k = 0;
        element.each(function () {
            k += $(this).outerWidth(true)
        });
        return k
    }

    Tabs.prototype.scroll = function (element) {

        var prevWidth = this.getWidth(element.prevAll()),
            nextWidth = this.getWidth(element.nextAll());

        var contentWidth = $(".content-tabs").outerWidth(true) - this.getWidth($(".content-tabs").children().not(".page-tabs"));

        var leftWidth = 0;

        if (this.tabsContent.outerWidth() < contentWidth) {
            leftWidth = 0
        } else {
            if (nextWidth <= (contentWidth - element.outerWidth(true) - element.next().outerWidth(true))) {
                if ((contentWidth - element.next().outerWidth(true)) > nextWidth) {
                    leftWidth = prevWidth;

                    var m = element;
                    while ((leftWidth - m.outerWidth()) > (this.tabsContent.outerWidth() - contentWidth)) {
                        leftWidth -= m.prev().outerWidth();
                        m = m.prev()
                    }
                }
            } else {
                if (prevWidth > (contentWidth - element.outerWidth(true) - element.prev().outerWidth(true))) {
                    leftWidth = prevWidth - element.prev().outerWidth(true)
                }
            }
        }
        this.tabsContent.animate({
            marginLeft: 0 - leftWidth + "px"
        }, "fast")
    }

    Tabs.prototype.closeAll = function () {

        this.tabsContent.children('a').not(":first").each(function () {
            var target = $(this).data('href')
            $(target).remove();
            $(this).remove();
        });
        this.tabsContent.children("a:first").each(function () {
            var target = $(this).data('href')
            $(target).addClass("active");
            $(this).addClass("active");
        });
        this.tabsContent.css("margin-left", "0")
    }

    Tabs.prototype.closeOther = function () {
        this.tabsContent.children("a").not(":first").not(".active").each(function () {
            var target = $(this).data('href')
            $(target).remove();
            $(this).remove();
        });
        this.tabsContent.css("margin-left", "0")
    }

    Tabs.prototype.close = function () {

        var $this = this;
        var $element = this.element;
        var $target = $($element.data('href'));

        if ($target.selector == '#home') {
            return false;
        }
        if ($element.hasClass("active")) {
            var $next = $element.next();
            var $prev = $element.prev();

            if ($next.size()) {
                $this.show($next);
            }
            if ($prev.size()) {
                $this.show($prev);
            }
        } else {
            var active = $this.tabsContent.find('a.active');
            $this.scroll(active)
        }

        $element.remove()
        $target.remove()
        return false
    }

    Tabs.prototype.refresh = function () {
        var $element = this.element;
        var target = $element.data('href');
        $(target).attr('src', $(target).attr('src'));
    }

    Tabs.prototype.scrollLeft = function () {

        var o = Math.abs(parseInt(this.tabsContent.css("margin-left")));
        var l = this.getWidth($(".content-tabs").children().not(".page-tabs"));
        var k = $(".content-tabs").outerWidth(true) - l;
        var p = 0;

        if (this.tabsContent.width() < k) {
            return false
        } else {
            var m = this.tabsContent.find('a:first');
            var n = 0;
            while ((n + $(m).outerWidth(true)) <= o) {
                n += $(m).outerWidth(true);
                m = $(m).next()
            }
            n = 0;
            if (this.getWidth($(m).prevAll()) > k) {
                while ((n + $(m).outerWidth(true)) < (k) && m.length > 0) {
                    n += $(m).outerWidth(true);
                    m = $(m).prev()
                }
                p = this.getWidth($(m).prevAll())
            }
        }
        this.tabsContent.animate({
            marginLeft: 0 - p + "px"
        }, "fast")
    }

    Tabs.prototype.scrollRight = function () {

        var o = Math.abs(parseInt(this.tabsContent.css("margin-left")));
        var l = this.getWidth($(".content-tabs").children().not(".page-tabs"));
        var k = $(".content-tabs").outerWidth(true) - l;
        var p = 0;

        if (this.tabsContent.width() < k) {
            return false
        } else {
            var m = this.tabsContent.find('a:first');
            var n = 0;

            while ((n + $(m).outerWidth(true)) <= o) {
                n += $(m).outerWidth(true);
                m = $(m).next()
            }
            n = 0;
            while ((n + $(m).outerWidth(true)) < (k) && m.length > 0) {
                n += $(m).outerWidth(true);
                m = $(m).next()
            }
            p = this.getWidth($(m).prevAll());
            if (p > 0) {
                this.tabsContent.animate({
                    marginLeft: 0 - p + "px"
                }, "fast")
            }
        }
    }


    // Tabs PLUGIN DEFINITION
    // =====================

    function Plugin(option) {
        var params = Array.prototype.slice.call(arguments, 1);
        return this.each(function () {
            var $this = $(this)
            var data = $this.data('lightUI.tabs')

            if (!data) $this.data('lightUI.tabs', (data = new Tabs(this, option)))
            if (typeof option == 'string') data[option].apply(data, params);
        })
    }
    var old = $.fn.Tabs

    $.fn.tabs = Plugin
    $.fn.tabs.Constructor = Tabs

    $(document)
        .on('click.lightUI.tabs.data-api', '[data-toggle="tabs"]', function (e) {
            e.preventDefault()
            $(this).tabs('show');
        })
        .on('click.lightUI.tabs.close', '[data-tabs="close"]', function (e) {
            e.preventDefault()
            $(this).parents("a").tabs('close');
        })
        .on('click.lightUI.tabs.refresh', '[data-tabs="refresh"]', function (e) {
            e.preventDefault()
            $(this).parents("a").tabs('refresh');
        })
        .on('click.lightUI.tabs.closeCurrent', '[data-tabs="closeCurrent"]', function () {
            var $current = $('.page-tabs-content').find('a.active');
            $current.tabs('close');
        })
        .on('click.lightUI.tabs.closeCurrent', '[data-tabs="refreshCurrent"]', function () {
            var $current = $('.page-tabs-content').find('a.active');
            $current.tabs('refresh');
        })
        .on('click.lightUI.tabs.closeAll', '[data-tabs="closeAll"]', function () {
            $(this).tabs('closeAll');
        })
        .on('click.lightUI.tabs.closeOther', '[data-tabs="closeOther"]', function () {
            $(this).tabs('closeOther');

        })
        .on('click.lightUI.tabs.scrollLeft', '[data-tabs="scrollLeft"]', function (e) {
            $(this).tabs('scrollLeft');
        })
        .on('click.lightUI.tabs.scrollRight', '[data-tabs="scrollRight"]', function (e) {
            $(this).tabs('scrollRight');
        })
}(jQuery);